name: Create Jira issue
on:
  issues:
    types:
      - opened
jobs:
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    steps:
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Issue Parser
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/issue-form.yml

      - name: Parse JSON Output
        id: parse-json
        run: |
          echo "Parsed Issue Body: ${{ steps.issue-parser.outputs.jsonString }}"
          JSON_DATA='${{ steps.issue-parser.outputs.jsonString }}'
          echo "parentKey=$(echo $JSON_DATA | jq -r '.parentKey')" >> $GITHUB_ENV
          echo "feature_summary=$(echo $JSON_DATA | jq -r '.feature_summary')" >> $GITHUB_ENV
          echo "schedule=$(echo $JSON_DATA | jq -r '.schedule')" >> $GITHUB_ENV
          echo "start_date=$(echo $JSON_DATA | jq -r '.startdate')" >> $GITHUB_ENV
          echo "end_date=$(echo $JSON_DATA | jq -r '.enddate')" >> $GITHUB_ENV

      - name: Debug Parsed Outputs
        run: |
          echo "Parsed Issue Body: ${{ steps.issue-parser.outputs.jsonString }}"
          echo "Parent Key: ${{ env.parentKey }}"
          echo "Feature Summary: ${{ env.feature_summary }}"
          echo "Schedule: ${{ env.schedule }}"
          echo "Start Date: ${{ env.start_date }}"
          echo "End Date: ${{ env.end_date }}"

      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}
            ${{ github.event.issue.body }}
          mode: md2jira

      - name: Determine Fields
        id: fields
        run: |
          # GitHub Issue에서 받은 날짜값을 변수로 저장
          start_date="${{ env.startdate }}"  # yyyy-mm-dd 형식으로 입력됨
          end_date="${{ env.enddate }}"  # yyyy-mm-dd 형식으로 입력됨

          # 날짜 형식 변환 (필요에 따라 다른 형식으로 변환할 수도 있음)
          start_date_formatted=$(date -d "$start_date" +%Y-%m-%d)
          end_date_formatted=$(date -d "$end_date" +%Y-%m-%d)

          echo "start_date=$start_date_formatted" >> $GITHUB_ENV
          echo "end_date=$end_date_formatted" >> $GITHUB_ENV

          if [[ -z "${{ env.parentKey }}" ]]; then
            # Epic 생성 (부모 이슈 없음)
            echo 'issuetype=에픽' >> $GITHUB_ENV
            JSON_FIELDS=$(jq -n \
              --arg feature_summary "${{ env.feature_summary }}" \
              --arg schedule "${{ env.schedule }}" \
              --arg start_date "$start_date_formatted" \
              --arg end_date "$end_date_formatted" \
              '{ summary: $feature_summary, customfield_10000: $schedule, customfield_10015: $start_date, customfield_10017: $end_date, duedate: $end_date }')
          else
            # Subtask 생성 (부모 이슈 존재)
            echo 'issuetype=하위 작업' >> $GITHUB_ENV
            JSON_FIELDS=$(jq -n \
              --arg parentKey "${{ env.parentKey }}" \
              --arg feature_summary "${{ env.feature_summary }}" \
              --arg schedule "${{ env.schedule }}" \
              '{ parent: { key: $parentKey }, summary: $feature_summary, customfield_10000: $schedule }')
          fi
          echo "fields=$(echo $JSON_FIELDS | jq -c .)" >> $GITHUB_ENV
      

      - name: Log Variables Before Creating Issue
        run: |
          echo "Issuetype: ${{ env.issuetype }}"
          echo "Fields: ${{ env.fields }}"

      - name: Create Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: KAN
          issuetype: ${{ env.issuetype }}
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: ${{ env.fields }}

      - name: Log created issue
        run: echo "Jira Issue ${{ steps.create.outputs.issue }} was created"

      - name: Checkout develop code
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Update issue title
        uses: actions-cool/issues-helper@v3
        with:
          actions: "update-issue"
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "${{ steps.create.outputs.issue }} ${{ github.event.issue.title }}"
